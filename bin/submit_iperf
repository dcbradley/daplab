#!/usr/bin/env python

from optparse import OptionParser
import os
from os.path import join as pathjoin
import sys

# find utils directory so imports can be made from there
self_dir = os.path.dirname(__file__)
util_dir = pathjoin(self_dir, 'utils')
sys.path.append(util_dir)

from daplabutils import create_dirs, fill_templates, submit_dag, get_missing_opts, add_common_options
from which import which

def main():
    options, args = get_opts()
    create_dirs(options)
    fill_templates(options)
    submit_dag(options)
    
def get_opts():
    path_to_self = os.path.realpath(__file__)
    bin_dir = os.path.dirname(path_to_self)
    util_dir = pathjoin(bin_dir, 'utils')

    # Set default values
    defaults = {}

    defaults['server_machine']     = "komatsu.chtc.wisc.edu"
    defaults['client_machine']     = "mongo.t2.ucsd.edu"

    defaults['base_submit_dir']    = os.getcwd()
    defaults['template_dir']       = pathjoin(bin_dir, 'templates')

    defaults['transfer_exec_path'] = which("iperf")
    defaults['server_args']        = None
    defaults['client_args']        = None

    defaults['reporter_exec_path'] = pathjoin(util_dir, 'IperfReport.py')
    defaults['wait_script']        = pathjoin(util_dir, 'wait.sh')
    defaults['stop_script']        = pathjoin(util_dir, 'stop.sh')

    defaults['duration']           = 30
    defaults['port']               = 5001

    # Add options
    parser = OptionParser()
    add_common_options(parser, defaults)

    parser.add_option("--duration", default=defaults['duration'])
    parser.add_option("--port", type="int", default=defaults['port'])

    # Parse command line args and turn options object into plain dict, for simplicity and compatibility
    options, args = parser.parse_args()
    options = options.__dict__

    # Add options that were not explicitly in the command line args
    options['transfer_name'] = os.path.basename(options['transfer_exec_path'])
    options['server_args'] = '-s -p {port}'.format(**options)
    options['client_args'] = '-c {server_machine} -i 5 -t {duration} -p {port}'.format(**options)

    # Make sure all options needed for program execution have values
    missing_opts = get_missing_opts(options)
    if missing_opts:
        print 'Missing values for the following options:'
        for opt in missing_opts: print opt
        sys.exit(1)

    return options, args

main()
