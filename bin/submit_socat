#!/usr/bin/env python

from optparse import OptionParser
import os
from os.path import join as pathjoin
import sys

# find utils directory so imports can be made from there
self_dir = os.path.dirname(__file__)
util_dir = pathjoin(self_dir, 'utils')
sys.path.append(util_dir)

from daplabutils import create_dirs, fill_templates, submit_dag, get_missing_opts
from which import which

def main():
    options, args = get_opts()
    create_dirs(options)
    fill_templates(options)
    submit_dag(options)
    
def get_opts():
    # Set default values
    default_server="komatsu.chtc.wisc.edu"
    default_server_address="/tmp/server_file"
    default_client="mongo.t2.ucsd.edu"
    default_client_address="./client_file"

    path_to_self = os.path.realpath(__file__)
    default_bin_dir = os.path.dirname(path_to_self)
    default_util_dir = pathjoin(default_bin_dir, 'utils')
    default_template_dir = pathjoin(default_bin_dir, 'templates')

    default_transfer_exec_path = which("socat")
    default_reporter_exec_path = pathjoin(default_util_dir, 'SocatReport.py')
    default_wait_script_path = pathjoin(default_util_dir, 'wait.sh')
    default_stop_script_path = pathjoin(default_util_dir, 'stop.sh')

    # Parse options
    parser = OptionParser()
    parser.add_option("--server-machine", default=default_server)
    parser.add_option("--client-machine", default=default_client)

    parser.add_option("--template-dir", default=default_template_dir, help="Path of directory containing templates")
    parser.add_option("--transfer-exec-path", default=default_transfer_exec_path, help="Path of socat executable")
    parser.add_option("--reporter-exec-path", default=default_reporter_exec_path, help="Path of socat reporter script")
    parser.add_option("--wait-script", default=default_wait_script_path, help="Path of script used to have server wait for client")
    parser.add_option("--stop-script", default=default_stop_script_path, help="Path of script used to stop server")

    parser.add_option("--base-submit-dir",default=os.getcwd())
    parser.add_option("--server-address", default=default_server_address, help="The address on the server to be read from and sent to client")
    parser.add_option("--client-address", default=default_client_address, help="The address on the client to write received data to")
    parser.add_option("--port",type="int",default=5001)

    options, args = parser.parse_args()
    # Use options as a plain dict rather than special object from optparse library, for simplicity and compatibility
    options = options.__dict__

    # include socat program arguments in the parsed options
    options['server_args'] = "-u -d -d -d -lu {server_address} TCP-LISTEN:{port}".format(**options)
    options['client_args'] = "-u -d -d -d -lu TCP:{server_machine}:{port} {client_address}".format(**options)

    # set transfer name to the name of the transfer executable
    options['transfer_name'] = os.path.basename(options['transfer_exec_path'])

    # options that must be defined by this time for successful execution:
    #   server_machine, client_machine, server_args, client_args
    #   transfer_exec_path, transfer_name, reporter_exec_path, wait_script, stop_script
    #   base_submit_dir, template_dir 
    missing_opts = get_missing_opts(options)
    if missing_opts:
        print 'Missing values for the following options:'
        for opt in missing_opts: print opt
        sys.exit(1)

    return options, args

main()
