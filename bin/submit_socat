#!/usr/bin/env python

import sys
from optparse import OptionParser
import os

# Try to find utils directory so imports can be made from there
self_dir= os.path.dirname(__file__)
util_dir = os.path.join(self_dir, 'utils')
sys.path.append(util_dir)

from which import which

def main():
    options, args = get_opts()

    testdir, dagdir = create_dirs(options.base_submit_dir)

    dagfile = create_from_template("dag_template", "socat.dag", dagdir, options)
    server_subfile = create_from_template("server_sub_template", "socat_server.sub", dagdir, options)
    client_subfile = create_from_template("client_sub_template", "socat_client.sub", dagdir, options)
    wait_subfile = create_from_template("wait_sub_template", "socat_server_wait.sub", dagdir, options)
    report_subfile = create_from_template("report_sub_template", "socat_report.sub", dagdir, options)

    # submit the DAG to condor
    os.chdir(testdir)
    rc = os.system( 'condor_submit_dag {dagfile}'.format(dagfile=dagfile) )
    if rc != 0:
       sys.exit(1)

def get_opts():
    # Set default values
    default_server="komatsu.chtc.wisc.edu"
    default_server_address="/tmp/server_file"
    default_client="mongo.t2.ucsd.edu"
    default_client_address="./client_file"

    path_to_self = os.path.realpath(__file__)
    default_bin_dir = os.path.dirname(path_to_self)
    default_util_dir = os.path.join(default_bin_dir, 'utils')
    default_template_dir = os.path.join(default_bin_dir, 'templates')

    default_transfer_exec_path = which("socat")
    default_reporter_exec_path = os.path.join(default_util_dir, 'SocatReport.py')
    default_wait_script_path = os.path.join(default_util_dir, 'wait.sh')
    default_stop_script_path = os.path.join(default_util_dir, 'stop.sh')

    # Parse options
    parser = OptionParser()
    parser.add_option("--server-machine", default=default_server)
    parser.add_option("--client-machine", default=default_client)

    parser.add_option("--template-dir", default=default_template_dir, help="Path of directory containing templates")
    parser.add_option("--transfer-exec-path", default=default_transfer_exec_path, help="Path of socat executable")
    parser.add_option("--reporter-exec-path", default=default_reporter_exec_path, help="Path of socat reporter script")
    parser.add_option("--wait-script", default=default_wait_script_path, help="Path of script used to have server wait for client")
    parser.add_option("--stop-script", default=default_stop_script_path, help="Path of script used to stop server")

    parser.add_option("--base-submit-dir",default=os.getcwd())
    parser.add_option("--server-address", default=default_server_address, help="The address on the server to be read from and sent to client")
    parser.add_option("--client-address", default=default_client_address, help="The address on the client to write received data to")
    parser.add_option("--port",type="int",default=5001)

    options, args = parser.parse_args()

    # include socat program arguments in the parsed options
    options.server_args = "-u -d -d -d -lu {server_address} TCP-LISTEN:{port}".format(**options.__dict__)
    options.client_args = "-u -d -d -d -lu TCP:{server_machine}:{port} {client_address}".format(**options.__dict__)

    return options, args

def create_dirs(basedir):
    # create a new test directory so different tests
    # do not stomp on each other
    testdir = os.path.join(basedir,"socat_test_1")
    i = 1
    while os.path.isdir( testdir ):
        i += 1
        testdir = testdir[:-1] + str(i)

    dagdir = os.path.join(testdir,"dag")
    print "Using directory", testdir

    # This will fail if there is a race and something else created
    # the test directory before we do.  Better to fail than to go
    # ahead and use the same directory as a different test instance.
    os.mkdir(testdir)
    os.mkdir(dagdir)

    return testdir, dagdir

def create_from_template(template_name, output_file_name, dagdir, options):
    # Read the content of the template file into the variable template
    template_file = os.path.join(options.template_dir, template_name)
    with open(template_file) as f:
        template = f.read()

    # Fill in the template with the chosen options
    output = template.format(**options.__dict__)

    # Write the filled in template to the dagdir
    output_file = os.path.join(dagdir, output_file_name)
    with open(output_file, 'w') as f:
        f.write(output)

    return output_file

main()
